[{"D:\\Documents\\My Repositories\\WebDev\\Proyecto\\ReactWeb\\usermanagerapp\\src\\index.js":"1","D:\\Documents\\My Repositories\\WebDev\\Proyecto\\ReactWeb\\usermanagerapp\\src\\App.js":"2","D:\\Documents\\My Repositories\\WebDev\\Proyecto\\ReactWeb\\usermanagerapp\\src\\components\\Users.js":"3"},{"size":517,"mtime":1606777067027,"results":"4","hashOfConfig":"5"},{"size":1023,"mtime":1606980285822,"results":"6","hashOfConfig":"5"},{"size":8710,"mtime":1606985949826,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ee68hy",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"D:\\Documents\\My Repositories\\WebDev\\Proyecto\\ReactWeb\\usermanagerapp\\src\\index.js",[],"D:\\Documents\\My Repositories\\WebDev\\Proyecto\\ReactWeb\\usermanagerapp\\src\\App.js",[],"D:\\Documents\\My Repositories\\WebDev\\Proyecto\\ReactWeb\\usermanagerapp\\src\\components\\Users.js",["15","16"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Container, Table, Form } from 'react-bootstrap';\r\nimport { FontAwesomeIcon as Fas} from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';\r\n\r\nconst baseUrl = \"https://localhost:5001/api/Users\";\r\n\r\n\r\nexport function List()\r\n{\r\n  const [ data, setData] = useState([]);\r\n\r\n  const getUsers = async() => {\r\n    await axios.get(baseUrl)\r\n    .then (response=>{\r\n      setData(response.data);\r\n    }).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n  \r\n  useEffect(()=>{\r\n    getUsers();\r\n  });\r\n\r\n  // Control data\r\n  const [currentUser, setCurrentUser]= useState({\r\n    id: '',\r\n    email: '',\r\n    username: '',\r\n    name: '',\r\n    password: ''\r\n  });\r\n  const handleChange=e=>{\r\n    const {name, value}= e.target;\r\n    setCurrentUser({\r\n      ...currentUser,\r\n      [name]: value\r\n    })\r\n  }\r\n  \r\n  // Create \r\n  const [showModalCreate, setShowModalCreate]= useState(false);\r\n  const openCloseModalCreate=()=>{\r\n    setShowModalCreate(!showModalCreate);\r\n  }  \r\n\r\n  const postUser = async() => {\r\n    delete currentUser.id;\r\n    await axios.post(baseUrl, currentUser)\r\n    .then (response=>{\r\n      setData(data.concat(response.data));\r\n      openCloseModalCreate();\r\n    }).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  // Update\r\n  const [showModalUpdate, setShowModalUpdate]= useState(false);\r\n  const openCloseModalUpdate=()=>{\r\n    setShowModalUpdate(!showModalUpdate);\r\n  }\r\n  const selectCurrentUser=(user, action)=>{\r\n    setCurrentUser(user);\r\n    switch (action) {\r\n      case \"Edit\":\r\n        openCloseModalUpdate();\r\n        break;\r\n      case \"Details\":\r\n        getUser(user);\r\n        break;\r\n      default:\r\n        break;\r\n    }     \r\n  }\r\n\r\n  const putUser = async() => {\r\n    await axios.put(baseUrl+\"/\"+currentUser.id, currentUser)\r\n    .then (response=>{\r\n      var result = response.data;\r\n      var updatedData = data;\r\n      updatedData.map(usr=>{\r\n        if(usr.id===currentUser.id){\r\n          usr.email = result.email;\r\n          usr.name = result.name;\r\n          usr.username = result.username;\r\n          usr.password = result.password;\r\n        }\r\n      });\r\n      openCloseModalUpdate();\r\n    }).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  // Details\r\n  const [showModalDetails, setShowModalDetails]= useState(false);\r\n  const openCloseModalDetails=()=>{\r\n    setShowModalDetails(!showModalDetails);\r\n  }\r\n\r\n  // Todo Hacer el Details\r\n  const getUser = async(user) => {\r\n    await axios.get(baseUrl+\"/\"+user.id)\r\n    .then (response=>{\r\n      var result = response.data;\r\n      var updatedData = data;\r\n      updatedData.map(usr=>{\r\n        if(usr.id===currentUser.id){\r\n          usr.email = result.email;\r\n          usr.name = result.name;\r\n          usr.username = result.username;\r\n          usr.password = result.password;\r\n        }\r\n      });\r\n      openCloseModalDetails();\r\n    }).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }  \r\n\r\n\r\nreturn (\r\n  <Container className=\"text-center text-md-left\">\r\n    <h1>User List </h1>\r\n    <p>\r\n      <Button className=\"left\" variant=\"success btn-sm\" onClick={()=>openCloseModalCreate()}> <Fas icon={faPlus} /> New</Button>\r\n    </p>  \r\n    <Table id=\"UsersTable\">\r\n      <thead>\r\n        <tr>\r\n            <th>Id</th>\r\n            <th>Email</th>\r\n            <th>Name</th>\r\n            <th>Username</th>\r\n            <th>Password</th>\r\n            <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map(usr=>(\r\n          <tr key={usr.id}>\r\n            <td>{usr.id}</td>\r\n            <td>{usr.email}</td>\r\n            <td>{usr.name}</td>\r\n            <td>{usr.username}</td>\r\n            <td>{usr.password}</td>\r\n            <td>\r\n              <Button variant=\"outline-primary\" onClick={()=>selectCurrentUser(usr, \"Edit\")}>Edit</Button>{\"  \"}\r\n              <Button variant=\"outline-warning\" onClick={()=>selectCurrentUser(usr, \"Details\")}>Details</Button>{\"  \"}\r\n              <Button variant=\"outline-danger\">Delete</Button>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n    </tbody>\r\n    </Table>\r\n\r\n    {/* Create */}\r\n    <Modal isOpen={showModalCreate}>\r\n      <ModalHeader>Create User</ModalHeader>\r\n      <ModalBody>\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Label variant=\"label\">Email:</Form.Label>\r\n            <Form.Control type=\"email\" id=\"txtEmail\" name=\"email\" placeholder=\"username@domain.com\" required onChange={handleChange}/>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label >Name:</Form.Label>\r\n            <Form.Control type=\"text\" id=\"txtName\" name=\"name\" placeholder=\"Julio Robles\" required onChange={handleChange}/>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Username:</Form.Label>\r\n            <Form.Control type=\"text\" id=\"txtUsername\" name=\"username\" placeholder=\"username\" required onChange={handleChange}/>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Password:</Form.Label>\r\n            <Form.Control type=\"password\" id=\"txtPassword\" name=\"password\"  onChange={handleChange}/>\r\n          </Form.Group>\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button variant=\"primary\" onClick={()=>postUser()}>Create</Button>\r\n        <Button variant=\"outline-info\" onClick={()=>openCloseModalCreate()}>Back</Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n\r\n    {/* Update */}\r\n    <Modal isOpen={showModalUpdate}>\r\n      <ModalHeader>Edit User</ModalHeader>\r\n      <ModalBody>\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Label variant=\"label\">Id:</Form.Label>\r\n            <Form.Control type=\"text\" id=\"txtId\" name=\"id\" readOnly value={currentUser && currentUser.id}/>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label variant=\"label\">Email:</Form.Label>\r\n            <Form.Control type=\"email\" id=\"txtEmail\" name=\"email\" placeholder=\"username@domain.com\" required onChange={handleChange}  value={currentUser && currentUser.email}/>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label >Name:</Form.Label>\r\n            <Form.Control type=\"text\" id=\"txtName\" name=\"name\" placeholder=\"Julio Robles\" required onChange={handleChange}  value={currentUser && currentUser.name}/>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Username:</Form.Label>\r\n            <Form.Control type=\"text\" id=\"txtUsername\" name=\"username\" placeholder=\"username\" required onChange={handleChange}  value={currentUser && currentUser.username}/>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Password:</Form.Label>\r\n            <Form.Control type=\"password\" id=\"txtPassword\" name=\"password\"  onChange={handleChange}  value={currentUser && currentUser.password}/>\r\n          </Form.Group>\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button variant=\"primary\" onClick={()=>putUser()}>Save</Button>\r\n        <Button variant=\"outline-info\" onClick={()=>openCloseModalUpdate()}>Back</Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n\r\n\r\n    {/* Details */}\r\n    <Modal isOpen={showModalDetails}>\r\n      <ModalHeader>Details User</ModalHeader>\r\n      <ModalBody>\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Label variant=\"label\">Id:</Form.Label>\r\n            <Form.Control type=\"text\" id=\"txtId\" name=\"id\" readOnly value={currentUser && currentUser.id}/>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label variant=\"label\">Email:</Form.Label>\r\n            <Form.Control type=\"email\" id=\"txtEmail\" name=\"email\" readOnly value={currentUser && currentUser.email}/>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label >Name:</Form.Label>\r\n            <Form.Control type=\"text\" id=\"txtName\" name=\"name\" readOnly value={currentUser && currentUser.name}/>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Username:</Form.Label>\r\n            <Form.Control type=\"text\" id=\"txtUsername\" name=\"username\" readOnly value={currentUser && currentUser.username}/>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Password:</Form.Label>\r\n            <Form.Control type=\"password\" id=\"txtPassword\" name=\"password\" readOnly value={currentUser && currentUser.password}/>\r\n          </Form.Group>\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button variant=\"outline-info\" onClick={()=>openCloseModalDetails()}>Back</Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  </Container>  \r\n\r\n);\r\n}",{"ruleId":"17","severity":1,"message":"18","line":85,"column":26,"nodeType":"19","messageId":"20","endLine":85,"endColumn":28},{"ruleId":"17","severity":1,"message":"18","line":111,"column":26,"nodeType":"19","messageId":"20","endLine":111,"endColumn":28},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]